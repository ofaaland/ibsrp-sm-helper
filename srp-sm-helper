#!/bin/bash

# Description: Start/Stop the srp-sm-helper service
#              srp-sm-helper service identifies point to point IB links which
#              need to have an SM running on them to function.
#
#              In order for this to be useful, srp_daemon must be started on
#              on these ports, and the ib_srp kernel module must be loaded.
#              See the srptools rpm for more information.

. /etc/rc.d/init.d/functions

initsysconfdir=/etc/sysconfig

log_cmd="logger -s -t ibsrp -p daemon.err"

# Defaults for config paramenters
OPENSM_SETTLE_TIMEOUT=1

# pick up our conf file if available
if [ -f $initsysconfdir/ibsrp.conf ]; then
   . $initsysconfdir/ibsrp.conf
else
   # warn if not...
   $log_cmd "WARNING: $initsysconfdir/ibsrp.conf not found; using defaults"
fi

LOG_DIR="/var/log/ibsrp"
PID_DIR="/var/run/ibsrp"

startOpenSMCA2CA()
{
    # some links, particularly QDR and faster, take some time to physically
    # link.  Wait a configurable amount of time for them to settle.
    test x$LINK_SETTLE_TIMEOUT != x && sleep $LINK_SETTLE_TIMEOUT
    for ch_adaptor in `ibstat -l`; do
      numport=`ibstat $ch_adaptor | grep Number | sed -e "s/.*:\(.*\)/\1/"`
      for port in `seq 1 $numport`; do
         if [ `ibstat $ch_adaptor $port | grep -c 'Link layer: Ethernet'` -ne 0 ]; then
            $log_cmd "Adaptor $ch_adaptor port $port is an ethernet port... Skipping smpquery."
         else
            # find if this port is connected to a CA or a switch
            smpquery -C $ch_adaptor -P $port -D nodeinfo 0,$port 2> /dev/null | grep NodeType | grep "Channel Adapter" > /dev/null
            ca=`echo $?`
            if [ "$ca" == "1" ]; then
                $log_cmd "Port $ch_adaptor:$port is not connected to a Channel Adaptor...  Skipping"
                continue
            fi

            # check for an SM on the other end of the link.
            smpquery -C $ch_adaptor -P $port -D portinfo 0,$port 2> /dev/null | grep IsSM
            sm=`echo $?`
            if [ "$sm" == "0" ]; then
                # if the other end provides an SM we don't need to bother
                $log_cmd "Port $ch_adaptor:$port is connected to a Channel Adaptor which is SM capable...  Skipping OpenSM start"
                continue
            fi

            port_guid=`smpquery -C $ch_adaptor -P $port -D nodeinfo 0 | grep PortGuid | sed -e "s/^PortGuid:\.*\(.*\)/\1/"`
            if [ "$port_guid" != "" ] ; then
                $log_cmd "Starting OpenSM on port $ch_adaptor:$port (guid $port_guid)"
                opensm -g $port_guid -s 300 -f $LOG_DIR/opensm-$port.log 2>&1 > $LOG_DIR/opensm-$port.log &
                pid=$!
                sleep $OPENSM_SETTLE_TIMEOUT
                run=`ps -p $pid -o comm=`
                if [ x$run == x ]; then
                     $log_cmd "Failed to start opensm; port $ch_adaptor:$port, guid $port_guid: see $LOG_DIR/opensm-$port.log"
                     echo_failure
                     exit 1
                fi
                echo $pid >> $PID_DIR/opensm.pid
            fi
         fi
      done
    done
}

kill_daemons()
{
    if [ -f $PID_DIR/opensm.pid ]; then
        for pid in `cat $PID_DIR/opensm.pid`; do
            kill $pid
        done
        rm -rf $PID_DIR/opensm.pid
    fi
}

start()
{
    $log_cmd "Starting..."

    if [ -f $PID_DIR/opensm.pid ]; then
	$log_cmd "ibsrp is already running..."
	echo_failure
	echo ""
	exit 1
    fi

#---------------------------------------------------------------
# Run opensm on each port if an SM isn't already running there
#---------------------------------------------------------------
    startOpenSMCA2CA
    rc=$?
    if [ "$rc" != "0" ]; then
        exit $rc
    fi

    echo_success
    echo ""
}

stop()
{
    $log_cmd "Stopping..."
    kill_daemons
    echo_success
}

if [ ! -d $PID_DIR ]; then
    mkdir -p $PID_DIR
fi

if [ ! -d $LOG_DIR ]; then
    mkdir -p $LOG_DIR
fi
 
case "$1" in
    start)
      start ;;
    stop)
      stop ;;
    restart)
      stop
      start ;;
    status)
      status ;;
    *)
      echo "Usage $0 (start|stop|restart|status) "
      exit 1
esac

exit 0
